#!/usr/bin/env python3
"""
Script de teste para o sistema de relat√≥rios profissionais
"""

import sys
import os
sys.path.append(os.path.join(os.path.dirname(__file__), 'app'))

from app.reports import report_generator
from datetime import datetime

def test_professional_reports():
    """Testa a gera√ß√£o de relat√≥rios profissionais em tons de cinza"""
    print("üß™ Testando sistema de relat√≥rios profissionais...")
    
    # Dados de teste mais robustos
    test_data = [
        {
            'id': 1,
            'descricao': 'Equipamento de Produ√ß√£o Industrial',
            'quantidade': 15,
            'status': 'Pendente',
            'urgencia': 'Urgente',
            'categoria': 'Equipamentos',
            'setor': 'F√°brica de Ra√ß√£o',
            'deliveryDate': '2024-05-25',
            'usuario_nome': 'Jo√£o Silva'
        },
        {
            'id': 2,
            'descricao': 'Mat√©ria-prima para Ra√ß√£o Animal',
            'quantidade': 500,
            'status': 'Conclu√≠do',
            'urgencia': 'Normal',
            'categoria': 'Mat√©rias-primas',
            'setor': 'CPO',
            'deliveryDate': '2024-05-20',
            'usuario_nome': 'Maria Santos'
        },
        {
            'id': 3,
            'descricao': 'Pe√ßas de Reposi√ß√£o para M√°quinas',
            'quantidade': 8,
            'status': 'Cancelado',
            'urgencia': 'Cr√≠tico',
            'categoria': 'Pe√ßas de Reposi√ß√£o',
            'setor': 'Abatedouro',
            'deliveryDate': '2024-05-22',
            'usuario_nome': 'Carlos Oliveira'
        },
        {
            'id': 4,
            'descricao': 'Servi√ßos de Manuten√ß√£o Preventiva',
            'quantidade': 1,
            'status': 'Pendente',
            'urgencia': 'Normal',
            'categoria': 'Servi√ßos',
            'setor': 'Granjas',
            'deliveryDate': '2024-05-28',
            'usuario_nome': 'Ana Costa'
        },
        {
            'id': 5,
            'descricao': 'Material de Escrit√≥rio e Papelaria',
            'quantidade': 25,
            'status': 'Conclu√≠do',
            'urgencia': 'Normal',
            'categoria': 'Material de Escrit√≥rio',
            'setor': 'Escrit√≥rio',
            'deliveryDate': '2024-05-18',
            'usuario_nome': 'Pedro Almeida'
        }
    ]
    
    # Configura√ß√£o do relat√≥rio profissional
    report_config = {
        'title': 'Relat√≥rio Executivo - Sistema AraldiTech',
        'period_label': 'Per√≠odo Analisado: 18/05/2024 a 28/05/2024',
        'user_name': 'Administrador do Sistema',
        'report_type': 'pedidos',
        'filters': {
            'status': None,  # Sem filtro para mostrar todos os dados
            'categoria': None,
            'urgencia': None,
            'setor': None
        }
    }
    
    try:
        print("üìÑ Gerando relat√≥rio PDF profissional...")
        pdf_buffer = report_generator.generate_pdf_report(test_data, report_config)
        pdf_size = len(pdf_buffer.getvalue())
        print(f"‚úÖ PDF profissional gerado! Tamanho: {pdf_size:,} bytes")
        
        # Salvar PDF de teste
        with open('relatorio_profissional.pdf', 'wb') as f:
            f.write(pdf_buffer.getvalue())
        print("üíæ PDF salvo como 'relatorio_profissional.pdf'")
        
        print("üìä Gerando relat√≥rio Excel profissional...")
        excel_buffer = report_generator.generate_excel_report(test_data, report_config)
        excel_size = len(excel_buffer.getvalue())
        print(f"‚úÖ Excel profissional gerado! Tamanho: {excel_size:,} bytes")
        
        # Salvar Excel de teste
        with open('relatorio_profissional.xlsx', 'wb') as f:
            f.write(excel_buffer.getvalue())
        print("üíæ Excel salvo como 'relatorio_profissional.xlsx'")
        
        # Teste com filtros aplicados
        print("\nüîç Testando relat√≥rio com filtros...")
        filtered_config = report_config.copy()
        filtered_config['filters'] = {
            'status': 'Pendente',
            'categoria': 'Equipamentos'
        }
        filtered_config['title'] = 'Relat√≥rio Filtrado - Pedidos Pendentes de Equipamentos'
        
        filtered_pdf = report_generator.generate_pdf_report(test_data, filtered_config)
        print(f"‚úÖ Relat√≥rio filtrado gerado! Tamanho: {len(filtered_pdf.getvalue()):,} bytes")
        
        with open('relatorio_filtrado.pdf', 'wb') as f:
            f.write(filtered_pdf.getvalue())
        print("üíæ Relat√≥rio filtrado salvo como 'relatorio_filtrado.pdf'")
        
        # Verificar se a logo foi carregada
        logo_path = os.path.join(os.path.dirname(__file__), 'app', 'assets', 'logo_vetor.png')
        if os.path.exists(logo_path):
            print("‚úÖ Logo vetorial encontrada e carregada com sucesso!")
        else:
            print("‚ö†Ô∏è Logo vetorial n√£o encontrada, usando fallback de texto")
        
        print("\nüéâ Todos os testes de relat√≥rios profissionais passaram!")
        print("üìÅ Arquivos gerados:")
        print("   - relatorio_profissional.pdf (Design profissional completo)")
        print("   - relatorio_profissional.xlsx (Formata√ß√£o Excel elegante)")
        print("   - relatorio_filtrado.pdf (Teste de filtros funcionais)")
        
        print("\nüìã Caracter√≠sticas implementadas:")
        print("   ‚úì Design profissional em tons de cinza, preto e branco")
        print("   ‚úì Logo vetorial AraldiTech com sombra sutil")
        print("   ‚úì Cabe√ßalho e rodap√© elegantes")
        print("   ‚úì Tabelas com formata√ß√£o profissional")
        print("   ‚úì M√©tricas e an√°lises detalhadas")
        print("   ‚úì Filtros funcionais aplicados corretamente")
        print("   ‚úì Formata√ß√£o Excel com cores alternadas")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro durante o teste: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_logo_loading():
    """Testa especificamente o carregamento da logo"""
    print("\nüñºÔ∏è Testando carregamento da logo...")
    
    logo_path = os.path.join(os.path.dirname(__file__), 'app', 'assets', 'logo_vetor.png')
    
    if os.path.exists(logo_path):
        file_size = os.path.getsize(logo_path)
        print(f"‚úÖ Logo encontrada: {logo_path}")
        print(f"üìè Tamanho do arquivo: {file_size:,} bytes")
        
        # Verificar se √© uma imagem v√°lida
        try:
            from PIL import Image
            with Image.open(logo_path) as img:
                print(f"üñºÔ∏è Dimens√µes da imagem: {img.size[0]}x{img.size[1]} pixels")
                print(f"üé® Formato: {img.format}")
                print(f"üîß Modo: {img.mode}")
            return True
        except Exception as e:
            print(f"‚ö†Ô∏è Erro ao verificar imagem: {e}")
            return False
    else:
        print(f"‚ùå Logo n√£o encontrada em: {logo_path}")
        return False

if __name__ == "__main__":
    print("=" * 60)
    print("üè¢ TESTE DO SISTEMA DE RELAT√ìRIOS ARALDI TECH")
    print("=" * 60)
    
    logo_ok = test_logo_loading()
    reports_ok = test_professional_reports()
    
    print("\n" + "=" * 60)
    if logo_ok and reports_ok:
        print("üéØ TODOS OS TESTES CONCLU√çDOS COM SUCESSO!")
        print("üöÄ Sistema de relat√≥rios profissionais pronto para uso!")
    else:
        print("‚ö†Ô∏è Alguns testes falharam. Verifique os logs acima.")
    print("=" * 60)
    
    sys.exit(0 if (logo_ok and reports_ok) else 1) 